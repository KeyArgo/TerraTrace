# Added processes.py module
# Added gather_data_from_user and create_kml_process functions
# Changed the way the kml files are generated by using the tzt datastructure

# Standard library imports
import math
import os
import re

# Third-party library imports
from geopy.distance import distance as geopy_distance
from geopy.point import Point
from geographiclib.geodesic import Geodesic
from scipy.spatial import ConvexHull

# Local module imports
from utils import (validate_dms, get_coordinate_in_dd_or_dms, 
                   parse_and_convert_dms_to_dd, parse_and_convert_dms_to_dd_survey, 
                   parse_dd_or_dms, is_polygon_close_to_being_closed, 
                   check_polygon_closure)
from computation import (compute_gps_coordinates_spherical, 
                         compute_gps_coordinates_vincenty, 
                         compute_gps_coordinates_karney, 
                         average_methods, calculate_distance)
from file_io import (save_data_to_file, save_kml_to_file, order_points, 
                     generate_kml_placemark, generate_complete_kml, 
                     generate_kml_polygon)
from processes import create_kml_process

def main():
    """
    Main function to run the program. It prompts the user to input initial coordinates, choose computation methods,
    and compute subsequent GPS points to form a polygon. It also offers the ability to export the results to KML or data files.
    
    Returns:
    - dict: A dictionary containing initial coordinates, monument details (if any), and polygon points.
    """

    # Execute the main process
    data = create_kml_process()



if __name__ == "__main__":
    main()